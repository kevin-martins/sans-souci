import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';
import { NotificationProps } from '@/models/notification';

type StoreProps = {
  notification: NotificationProps[]
}

const initialState: StoreProps = {
  notification: []
};

export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: any) => {
    const response: any = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const dataSlice = createSlice({
  name: 'data',
  initialState,
  reducers: {
    addNotification: (state, action) => {
      state.notification += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   });
  },
});

export const { addNotification } = dataSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: StoreProps) => state.notification;

export default dataSlice.reducer;
